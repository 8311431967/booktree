{
  "books": [
    {
      "id": 1,
      "description": "经典!",
      "title": "《企业应用架构模式》"
    },
    {
      "id": 2,
      "description": "本书将成为与《设计模式》一样的被读者广泛认可的经典之作。《设计模式》只探讨了面向对象开发的一个抽象层级，而本书涵盖了三个：高层的架构模式、中层的设计模式，以及特定语言的成例。",
      "title": "《面向模式的软件架构卷1: 模式系统》",
      "depends": [
        1, 10
      ]
    },
    {
      "id": 3,
      "description": "全面详尽地讲解了各种DSL及其构造方式，揭示了与编程语言无关的通用原则和模式，阐释了如何通过DSL有效提高开发人员的生产力以及增进与领域专家的有效沟通，能为开发人员选择和使用DSL提供有效的决策依据和指导方法。",
      "title": "《领域特定语言》"
    },
    {
      "id": 4,
      "description": "分别从战略和战术层面详尽地讨论了如何实现DDD，其中包含了大量的最佳实践、设计准则和对一些问题的折中性讨论。",
      "title": "《实现领域驱动设计》",
      "depends": [
        3
      ]
    },
    {
      "id": 5,
      "description": "全书围绕着设计和开发实践，结合若干真实的项目案例，向读者阐述如何在真实的软件开发中应用领域驱动设计。  ",
      "title": "《领域驱动设计》",
      "depends": [
        4
      ]
    },
    {
      "id": 6,
      "description": "主要面向软件开发者群体，尤其是对敏捷开发感兴趣的程序设计人员。浮现式设计是一种敏捷技术，强调在开发过程中不断演进。",
      "title": "《浮现式设计:专业软件开发的演进本质》"
    },
    {
      "id": 7,
      "description": "作者建议根据项目面临的风险来调整架构设计的成本，并从多个视角阐述了软件架构的建模过程和方法，包括用例模型、概念模型、域模型、设计模型和代码模型等。",
      "title": "《恰如其分的软件架构》"
    },
    {
      "id": 10,
      "description": "书中揭示了模块化的重要性，如何实现模块化，以及如何使用OSGi实现模块化架构。",
      "title": "《Java应用架构设计》"
    },
    {
      "id": 8,
      "description": "从全新的视角重新解读软件架构，揭示软件架构的本质，是一本强调实践、注重实效、轻量级、面向开发人员的软件架构指南。",
      "title": "《程序员必读之软件架构》",
      "depends": [
        6, 7
      ]
    },
    {
      "id": 9,
      "description": "围绕5个主题领域来组织《架构之美》的内容：概述、企业应用、系统、最终用户应用和编程语言。",
      "title": "《架构之美》",
      "depends": [
        2, 5, 8
      ]
    }
  ]
}
